NODES                    1000
CYCLE                    100000   # One block per cycle
ROUND                    100      # One calibration per round (counted in cycles)
BLOCKS                   12869

EXTRA_TCP_TRIPS          0
TH                       5   # msec to process header
TB                       45   # msec to process body

SPOT_LATENCY             2   # latency between nodes at same location (msec)

D                        8   # Degree
W                        2   # How many weakest links to replace

LOGFILE                  prg_l
engine.mode              sim
#engine.duration          0
random.seed              0
network.size             NODES



###################################
# EPIDEMIC DISSEMINATION PROTOCOL #
###################################


protocol.diss            prot.PerigeePunishLast
{
  peer                   Peer

  step                   ROUND * CYCLE     # calibration period, through nextCycle()

  header_validation_time TH
  body_validation_time   TB
  extra_tcp_trips        EXTRA_TCP_TRIPS

  outgoing               D
  incoming               20
  weakest_links          W
  round                  ROUND             # every how many blocks to calibrate

  transport              deltaQ
}



#################
#   TRANSPORT   #
#################

transport.deltaQ         TransportDeltaQ





####################
#   INITIALIZERS   #
####################

include.init             latencies_matrix
#include.init             latencies_matrix, static_topo
#include.init             wireCRPeers


init.latencies_matrix    MatrixParser
{
  file                   wondernetwork_latencies_oneway_2022-02-08.dat
  #file                   wondernetwork_latencies.dat
  #file                   iohk_testbed_latencies.dat
  trace_ticks_per_sec    1000
  ticks_per_sec          1000
  min                    SPOT_LATENCY
}

init.cr_init             prot.InitializerCR
{
  protocol               diss
  c                      C
  r                      R
}

init.prg_init            prot.InitializerPRG
{
  protocol               diss
  r                      R
}



###################
#    OBSERVERS    #
###################

#include.control         tri
#control.tri             CheckTriangularity
#control.tri.final

include.control         mining, stats

control.mining          BlockGeneration
{
  protocol              diss
  step                  CYCLE
  skip                  ROUND
  blocks                BLOCKS
}

control.stats           Stats
{
  protocol              diss
  step                  ROUND * CYCLE
  final
}

control.degree          peernet.reports.DegreeStats
{
  trace
  #step                  10 * CYCLE
  at                    CYCLE
  protocol              diss
  #undir
  method                freq
}
