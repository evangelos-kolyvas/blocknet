NODES                    1000
CYCLE                    20000   # One block per cycle
ROUND                    100      # One calibration per round (counted in cycles)
BLOCKS                   12869

EXTRA_TCP_TRIPS          0
TH                       5   # msec to process header
TB                       50   # msec to process body

SPOT_LATENCY             2   # latency between nodes at same location (msec)

# Note that the degree in Perigee terminology is now S+R.
# However, the real degree of a node is C+S+R.
# Essentially, Perigee maintains S+R outgoing links, which it scores, and in each calibration replaces the R weakest ones.
C                        4   # num close neighbors  (set C=0 for pure perigee)
S                        4   # num score-based neighbors
R                        2   # num random neighbors (replacing weakest links)

LOGFILE                  hybr
engine.mode              sim
#engine.duration          0
random.seed              0
network.size             NODES



###################################
# EPIDEMIC DISSEMINATION PROTOCOL #
###################################


protocol.diss            prot.PerigeeSubset
{
  peer                   Peer

  step                   ROUND * CYCLE     # calibration period, through nextCycle()

  header_validation_time TH
  body_validation_time   TB
  extra_tcp_trips        EXTRA_TCP_TRIPS
  header_only            false

  outgoing               S+R
  incoming               10000
  weakest_links          R
  round                  ROUND             # every how many blocks to calibrate

  body_requests          C+S+R
  transport              proc
}



#################
#   TRANSPORT   #
#################

transport.deltaQ        TransportDeltaQ

transport.proc     TransportProcessing
{
  processingMin          30
  processingMax          300
}



####################
#   INITIALIZERS   #
####################

include.init             latencies_matrix, cr_init


init.latencies_matrix    MatrixParser
{
  file                   latencies/wondernetwork_latencies_oneway_2022-02-08.dat
  trace_ticks_per_sec    1000
  ticks_per_sec          1000
  min                    SPOT_LATENCY
}

# Initialize each node with C close bidirectional links only, no random links
init.cr_init             prot.InitializerCR
{
  protocol               diss
  c                      C
  r                      0
  undir                  true
}



###################
#    OBSERVERS    #
###################

#include.control         tri
#control.tri             CheckTriangularity
#control.tri.final

include.control         mining, stats

control.mining          BlockGeneration
{
  protocol              diss
  step                  CYCLE
  skip                  ROUND
  blocks                BLOCKS
}

control.stats           Stats
{
  protocol              diss
  step                  ROUND * CYCLE
  final
}

control.degree          peernet.reports.DegreeStats
{
  trace
  #step                  10 * CYCLE
  at                    CYCLE
  protocol              diss
  #undir
  method                freq
}