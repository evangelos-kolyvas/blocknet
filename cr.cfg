NODES                    52
CYCLE                    100000
BLOCKS                   52

EXTRA_TCP_TRIPS          3
TH                       5   # msec to process header
TB                       45  # msec to process body

SPOT_LATENCY             0   # latency between nodes at same location (msec)

C                        5  # 5
R                        5  # 10-C

LOGFILE                  xxx
engine.mode              sim
#engine.duration          0
random.seed              0
network.size             NODES



###################################
# EPIDEMIC DISSEMINATION PROTOCOL #
###################################


protocol.diss            cr.Dissemination
{
  peer                   Peer

  headerProcessing       TH
  bodyProcessing         TB

  extra_tcp_trips        EXTRA_TCP_TRIPS              

  transport              cardano
}



#################
#   TRANSPORT   #
#################

transport.cardano        TransportDeltaQ





####################
#   INITIALIZERS   #
####################

#include.init             latencies_matrix, cr_init
include.init             latencies_matrix, static_topo
#include.init             wireCRPeers


init.latencies_matrix    MatrixParser
{
  #file                   cardano_latencies_matrix
  file                   cardano_latencies.dat
  trace_ticks_per_sec    1000
  ticks_per_sec          1000
  min                    SPOT_LATENCY
}


init.cr_init             cr.InitializerCR
{
  protocol               diss
  c                      C
  r                      R
}

init.static_topo         cr.InitializerStatic
{
  protocol               diss
  topology               topology.dat
}



# edgeOrientation:
# direct (pushBased)
# revert (subscriptionBased)
# bidirectional

init.wireCRPeers      VParser
{
  protocol            diss
  edgeOrientation     subscriptionBased
  crsDegrees          5_5_0
}



###################
#    OBSERVERS    #
###################

#include.control         tri
#control.tri             CheckTriangularity
#control.tri.final

include.control         mining, stats

control.mining          BlockGeneration
{
  protocol              diss
  step                  CYCLE
  blocks                BLOCKS
}

control.stats           Stats
{
  protocol              diss
  blocks                BLOCKS
  final
}

control.degree          peernet.reports.DegreeStats
{
  trace
  #step                  10 * CYCLE
  at                    CYCLE
  protocol              diss
  #undir
  method                freq
}
          
